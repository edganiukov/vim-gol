*vim-go.txt* Go development plugin
*vim-go*

==============================================================================
#                                                                            #
#             ##     ## #### ##     ##          ######    #######            #
#             ##     ##  ##  ###   ###         ##    ##  ##     ##           #
#             ##     ##  ##  #### ####         ##        ##     ##           #
#             ##     ##  ##  ## ### ## ####### ##   #### ##     ##           #
#              ##   ##   ##  ##     ##         ##    ##  ##     ##           #
#               ## ##    ##  ##     ##         ##    ##  ##     ##           #
#                ###    #### ##     ##          ######    #######            #
#                                                                            #
==============================================================================
CONTENTS                                                         *go-contents*

  1. Intro........................................|go-intro|
  2. Install......................................|go-install|
  3. Commands.....................................|go-commands|
  4. Mappings.....................................|go-mappings|
  5. Text Objects.................................|go-text-objects|
  6. Functions....................................|go-functions|
  7. Settings.....................................|go-settings|
  8. Syntax highlighting..........................|go-syntax|
  9. FAQ/Troubleshooting..........................|go-troubleshooting|
 10. Development..................................|go-development|
 11. Donation.....................................|go-donation|
 12. Credits......................................|go-credits|

==============================================================================
INTRO                                                               *go-intro*

Go (golang) support for Vim. vim-go comes with sensible predefined settings
(e.g. automatic `gofmt` on save), has code completion, snippet support,
improved syntax highlighting, go toolchain commands, etc. It is highly
customizable, and individual features can be toggled easily. vim-go leverages
a number of tools developed by the Go community to provide a seamless Vim
experience.

  * Compile your package with |:GoBuild|, install it with |:GoInstall| or
    test it with |:GoTest|. Run a single test with |:GoTestFunc|).
  * Quickly execute your current file(s) with |:GoRun|.
  * Improved syntax highlighting and folding.
  * `gofmt` or `goimports` on save keeps the cursor position and undo history.
  * Look up documentation with |:GoDoc|.
  * Easily import packages via |:GoImport|, remove them via |:GoDrop|.
  * See which code is covered by tests with |:GoCoverage|.
  * Lint your code with |:GoLint|, run your code through |:GoVet| to catch
    static errors.
  * Automatic `GOPATH` detection which works with `gb` and `godep`. Change or
    display `GOPATH` with |:GoPath|.
  * Text objects such as "a function" (|go-af|) or "inner function" (|go-if|).
  * Most commands are run asynchronous in Neovim and Vim 8. Fully async
    building and testing.
  * Integrated with the Neovim terminal, launch |:GoRun| and other Go commands
    in a terminal buffer.
  * Supports integration with the Tagbar plugin.

==============================================================================
INSTALL                                                           *go-install*

vim-go requires at least Vim 8.0.1453 or Neovim 0.3.2. On macOS, if you are
still using your system version of vim, you can use homebrew to keep your
version of Vim up-to-date with the following terminal command:
>
  brew install vim

The latest stable release, https://github.com/fatih/vim-go/releases/latest, is
the recommended version to use. If you choose to use the master branch
instead, please do so with caution; it is a _development_ branch.

vim-go follows the standard runtime path structure and should work with any of
the major plugin managers.

For Pathogen or Vim |packages|, just clone the repo. For other plugin managers
you may also need to add the lines to your vimrc to execute the plugin
manager's install command.

*  Vim 8 |packages| >

    git clone https://github.com/edganiukov/vim-gol.git \
      ~/.vim/pack/plugins/start/vim-gol
<
*  https://github.com/tpope/vim-pathogen >

    git clone https://github.com/edganiukov/vim-gol.git ~/.vim/bundle/vim-gol
<
*  https://github.com/junegunn/vim-plug >

    Plug 'edganiukov/vim-gol'
<
*  https://github.com/Shougo/neobundle.vim >

    NeoBundle 'edganiukov/vim-gol'
<
*  https://github.com/gmarik/vundle >

    Plugin 'edganiukov/vim-gol'
<
*  Manual (not recommended) >

    Copy all of the files into your `~/.vim` directory
<

Depending on your installation method, you may have to generate the plugin's
|:helptags| manually (e.g. `:helptags ALL`).

Code completion is enabled by default via 'omnifunc', which you can trigger
with |i_CTRL-X_CTRL-O| (`<C-x><C-o>`).

Supported Go plugins~                                         *vim-go-plugins*

The following plugins are supported for use with vim-go:

* Display source code navigation in a sidebar:
  https://github.com/majutsushi/tagbar

==============================================================================
COMMANDS                                                         *go-commands*

                                                        *:GoReportGitHubIssue*
:GoReportGitHubIssue
    GoReportGitHubIssue opens the default browser and starts a new bug report
    with useful system information.

                                                                     *:GoPath*
:GoPath [path]

    GoPath sets and overrides GOPATH with the given {path}. If no {path} is
    given it shows the current GOPATH. If `""` is given as path, it clears
    current `GOPATH` which was set with |:GoPath| and restores `GOPATH` back
    to the initial value which was sourced when Vim was started.

                                                                   *:GoImport*
:GoImport[!] [path]

    Import ensures that the provided package {path} is imported in the current
    Go buffer, using proper style and ordering. If {path} is already being
    imported, an error will be displayed and the buffer will be untouched.

    If [!] is given it will download the package with `go get`

                                                                 *:GoImportAs*
:GoImportAs [localname] [path]

    Same as Import, but uses a custom local name for the package.

                                                                     *:GoDrop*
:GoDrop [path]

    Remove the import line for the provided package {path}, if present in the
    current Go buffer.  If {path} is not being imported, an error will be
    displayed and the buffer will be untouched.

                                                                     *:GoLint*
:GoLint! [packages]

    Run golint for the directory under your current file, or for the given
    packages.

    If [!] is not given the first error is jumped to.

                                                                      *:GoDoc*
:GoDoc [word]

    Open the relevant GoDoc in split window for either the word[s] passed to
    the command or by default, the word under the cursor.

                                                                      *:GoFmt*
:GoFmt

    Filter the current Go buffer through gofmt.  It tries to preserve cursor
    position and avoids replacing the buffer with stderr output.

                                                                  *:GoImports*
:GoImports

    Filter the current Go buffer through goimports (needs to be installed).
    `goimports` automatically discards/add import path based on the code. Like
    |:GoFmt|, It tries to preserve cursor position and avoids replacing the
    buffer with stderr output.

                                                                      *:GoVet*
:GoVet[!] [options]

    Run `go vet` for the directory under your current file. Vet examines Go
    source code and reports suspicious constructs, such as Printf calls whose
    arguments do not align with the format string. Vet uses heuristics that do
    not guarantee all reports are genuine problems, but it can find errors not
    caught by the compilers.

    You may optionally pass any valid go vet flags/options.

    If [!] is not given the first error is jumped to.

                                                                      *:GoRun*
:GoRun[!] [expand]

    Build and run your current main package. By default all main files for the
    current file is used. If an argument is passed, [expand] is used as file
    selector. For example use `:GoRun %` to select the current file only.

    You may optionally pass any valid go run flags/options. For a full list
    please see `go help run`.

    If [!] is not given the first error is jumped to.

    If using neovim then `:GoRun` will run in a new terminal according to
    |'g:go_term_mode'|.

                                                                    *:GoBuild*
:GoBuild[!] [expand]

    Build your package with `go build`. Errors are populated in the quickfix
    window. It automatically builds only the files that depends on the current
    file. `:GoBuild` doesn't produce a result file.
    Use |:make| to create a result file.

    You may optionally pass any valid go build flags/options. For a full list
    please see `go help build`. Options are expanded with [expand].

    If [!] is not given the first error is jumped to.

    If using neovim then this command is fully async, it does not block the
    UI.

                                                                 *:GoGenerate*
:GoGenerate[!] [expand]

    Creates or updates your auto-generated source files by running `go
    generate`.

    You may optionally pass any valid go generate flags/options. For a full
    list please see `go help generate`. Options are expanded with [expand].

    If [!] is not given the first error is jumped to.

                                                                  *:GoInstall*
:GoInstall[!] [options]

    Install your package with `go install`.

    You may optionally pass any valid go install flags/options. For a full
    list please see `go help install`.

    If [!] is not given the first error is jumped to.

                                                                     *:GoTest*
:GoTest[!] [expand]

    Run the tests on your _test.go files via in your current directory. Errors
    are populated in the quickfix window.  If an argument is passed, [expand]
    is used as file selector (useful for cases like `:GoTest ./...`).

    You may optionally pass any valid go test flags/options. For a full list
    please see `go help test`.

    GoTest timesout automatically after 10 seconds. To customize the timeout
    use |'g:go_test_timeout'|. This feature is disabled if any arguments are
    passed to the `:GoTest` command.

    If [!] is not given the first error is jumped to.

    If using neovim `:GoTest` will run in a new terminal or run asynchronously
    in the background according to |'g:go_term_enabled'|. You can set the mode
    of the new terminal with |'g:go_term_mode'|.

                                                                 *:GoTestFunc*
:GoTestFunc[!] [expand]

    Runs :GoTest, but only on the single test function immediate to your
    cursor using 'go test's '-run' flag.

    Lookup is done starting at the cursor (including that line) moving up till
    a matching `func Test` pattern is found or top of file is reached. Search
    will not wrap around when at the top of the file.

    If [!] is not given the first error is jumped to.

    If using neovim `:GoTestFunc` will run in a new terminal or run
    asynchronously in the background according to |'g:go_term_enabled'|. You
    can set the mode of the new terminal with |'g:go_term_mode'|.

                                                              *:GoTestCompile*
:GoTestCompile[!] [expand]

    Compile your _test.go files via in your current directory. Errors are
    populated in the quickfix window.  If an argument is passed, [expand] is
    used as file selector (useful for cases like `:GoTest ./...`). Useful to
    not run the tests and capture/fix errors before running the tests or to
    create test binary.

    If [!] is not given the first error is jumped to.

    If using neovim `:GoTestCompile` will run in a new terminal or run
    asynchronously in the background according to |'g:go_term_enabled'|. You
    can set the mode of the new terminal with |'g:go_term_mode'|.

                                                                 *:GoCoverage*
:GoCoverage[!] [options]

    Create a coverage profile and annotates the current file's source code. If
    called again it rerurns the tests.

    If [!] is not given the first error is jumped to.

                                                           *:GoCoverageToggle*
:GoCoverageToggle[!] [options]

    Create a coverage profile and annotates the current file's source code. If
    called again clears the annotation (works as a toggle).

    If [!] is not given the first error is jumped to.

                                                            *:GoCoverageClear*
:GoCoverageClear [options]

   Clears the coverage annotation.

:GoFiles [source_files]

    Show source files for the current package. The [source_files] specifies
    which file types to list. See the "// Source files" section of
    `go list -h` for possible values; multiple values are accepted.
    Command-line completion also works for this command.
    The default is to use `GoFiles` if no arguments are given.

                                                                     *:GoDeps*
:GoDeps

    Show dependencies for the current package.

                                                                *:GoBuildTags*
:GoBuildTags [tags]

    Changes the build tags for various commands. If you have any file that
    uses a custom build tag, such as `// +build integration` , this command
    can be used to pass it to all tools that accepts tags, such as gopls,
    guru, gorename, etc.

    The build tags is cleared (unset) if `""` is given. If no arguments are
    given it prints the current build tags.

                                                        *:GoFmtAutoSaveToggle*
:GoFmtAutoSaveToggle

    Toggles |'g:go_fmt_autosave'|.

                                                     *:GoModFmtAutoSaveToggle*
:GoModFmtAutoSaveToggle

    Toggles |'g:go_mod_fmt_autosave'|.

                                                                  *:GoModFmt*
:GoModFmt

    Filter the current go.mod buffer through "go mod edit -fmt" command.  It
    tries to preserve cursor position and avoids replacing the buffer with
    stderr output.

==============================================================================
MAPPINGS                                                        *go-mappings*

vim-go has several <Plug> keys which can be used to create custom mappings
For example, to create a mapping that calls `go run` for the current package,
create a mapping for the `(go-run)`: >

  au FileType go nmap <leader>r <Plug>(go-run)

As always one is free to create more advanced mappings or functions based with
|go-commands|. For more information please check out the mappings command
documentation in the |go-commands| section. Available <Plug> keys are:

                                                                    *(go-run)*

Calls `go run` for the current main package

                                                                *(go-run-tab)*

Calls `go run` for the current file in a new terminal tab
This option is neovim only.

                                                              *(go-run-split)*

Calls `go run` for the current file in a new terminal horizontal split
This option is neovim only.

                                                           *(go-run-vertical)*

Calls `go run` for the current file in a new terminal vertical split
This option is neovim only.

                                                                  *(go-build)*

Calls `go build` for the current package

                                                               *(go-generate)*

Calls `go generate` for the current package

                                                                   *(go-info)*

Shows type information for the word under the cursor

                                                                *(go-install)*

Calls `go install` for the current package

                                                                   *(go-test)*

Calls `go test` for the current package

                                                              *(go-test-func)*

Calls `go test -run '...'` for the test function immediate to cursor

                                                           *(go-test-compile)*

Calls `go test -c` for the current package

                                                               *(go-coverage)*

Calls `go test -coverprofile-temp.out` for the current package and shows the
coverage annotation.

                                                         *(go-coverage-clear)*

Clears the coverage annotation

                                                        *(go-coverage-toggle)*

Calls `go test -coverprofile-temp.out` for the current package and shows the
coverage annotation. If run again it acts as a toggle and clears the
annotation.

                                                                *(go-imports)*

Calls `goimports` for the current package

                                                                   *(go-lint)*

Calls `golint` for the current package

                                                                    *(go-vet)*

Calls `go vet` for the current package


                                                                  *(go-files)*

Show source files that depends for the current package


                                                                   *(go-deps)*

Show dependencies for the current package

                                                                    *(go-doc)*

Show the relevant GoDoc for the word under the cursor in a split window
leftabove (default mode).

                                                              *(go-doc-split)*

Show the relevant GoDoc for the word under the cursor in a split window.


                                                           *(go-doc-vertical)*

Show the relevant GoDoc for the word under the cursor in a vertical split
window.

                                                                *(go-doc-tab)*

Show the relevant GoDoc for the word under the cursor in a tab window.

                                                                 *(go-import)*

Calls `:GoImport` for the current package

                                                                *(go-mod-fmt)*

Calls |:GoModFmt| for the current buffer

==============================================================================
TEXT OBJECTS                                                 *go-text-objects*

vim-go comes with several custom |text-objects| that can be used to operate
upon regions of text. vim-go currently defines the following text objects:

                                               *go-v_af* *go-af*
af            "a function", select contents from a function definition to the
               closing bracket. If |'g:go_textobj_include_function_doc'| is
               enabled it also includes the comment doc for a function
               declaration. This text-object also supports literal functions.
               If |'g:go_textobj_include_variable'| is enabled it also
               includes the variable of an function assignment

                                               *go-v_if* *go-if*
if            "inside a function", select contents of a function,
              excluding the function definition and the closing bracket. This
              text-object also supports literal functions

                                               *go-v_ac* *go-ac*
ac            "a comment", select contents of the current comment block.

                                               *go-v_ic* *go-ic*
ic            "inner comment", select contents of the current comment block,
              excluding the start and end comment markers.

vim-go also defines the following text motion objects:

                                               *go-v_]]* *go-]]*
]]            [count] forward to next function declaration. If
              |'g:go_textobj_include_function_doc'| is enabled and if your
              on a comment, it skips the function which the comment
              belongs and forwards to the next function declaration.

                                               *go-v_[[* *go-[[*
[[            [count] backward to previous function declaration.



==============================================================================
FUNCTIONS                                                       *go-functions*

                                                        *go#statusline#Show()*

Shows the status of a job running asynchronously. Can be used to plug into the
statusline. It works to show the status per package instead of per file.
Assume you have three files open, all belonging to the same package, if the
package build (`:GoBuild`) is successful, all statuslines will show `success`,
if it fails all windows' statuslines will show `failed`.

To avoid always showing old status information, the status information is
cleaned for each package after `60` seconds. This can be changed with the
|'g:go_statusline_duration'| setting.

                                                       *go#complete#GetInfo()*

Returns the description of the identifer under the cursor. Can be used to plug
into the statusline.

                                                   *go#tool#DescribeBalloon()*

Suitable to be used as an expression to show the evaluation balloon. See `help
balloonexpr`.

==============================================================================
SETTINGS                                                        *go-settings*

                                                     *'g:go_version_warning'*

Enable warning when using an unsupported version of Vim. By default it is
enabled.
>
  let g:go_version_warning = 1
<

                                                      *'g:go_test_show_name'*

Show the name of each failed test before the errors and logs output by the
test. By default it is disabled.
>
  let g:go_test_show_name = 0
<

                                                         *'g:go_test_timeout'*

Use this option to change the test timeout of |:GoTest|. By default it is
set to 10 seconds . >

  let g:go_test_timeout= '10s'
<
                                                           *'g:go_updatetime'*

Use this option to configure the delay until it starts some jobs (see
|'g:go_auto_type_info'|, |'g:go_auto_sameids'|). If set to 0, it uses the
value from 'updatetime'. By default it's set to 800ms.
>
  let g:go_updatetime = 800
<
                                                        *'g:go_jump_to_error'*

Use this option to enable/disable passing the bang attribute to the mappings
|(go-build)|, |(go-run)|, etc..  When enabled it will jump to the first error
automatically (means it will NOT pass the bang attribute to the appropriate
command, i.e: (go-run) -> :GoRun ). Note, that calling this doesn't have any
affect on calling the commands manually. This setting is only useful for
changing the behaviour of our custom static mappings. By default it's enabled.
>
  let g:go_jump_to_error = 1
<
                                                         *'g:go_fmt_autosave'*

Use this option to auto |:GoFmt| on save. By default it's enabled >

  let g:go_fmt_autosave = 1
<
                                                          *'g:go_fmt_command'*

Use this option to define which tool is used to gofmt. By default `gofmt` is
used.
>

  let g:go_fmt_command = "gofmt"
<
                                                          *'g:go_fmt_options'*

Use this option to add additional options to the |'g:go_fmt_command'|. It's
value type can be either a string or a dictionary. This is due backwards
compatibility. The string version will be removed in the future so please use
the dictionary version. Default is empty.
>
  let g:go_fmt_options = ''

  or

  let g:go_fmt_options = {}
<
The dictionary version allows you to define options for multiple binaries:
>
  let g:go_fmt_options = {
    \ 'gofmt': '-s',
    \ 'goimports': '-local mycompany.com',
    \ }
<
                                                          *'b:go_fmt_options'*

This option is identical to |'g:go_fmt_options'|, but a buffer-level setting.
If present, it's used instead of the global setting. By default it is not set.

As an example, the following autocmd will configure goimports to put imports
of packages from the current module in their own group:
>
  autocmd FileType go let b:go_fmt_options = {
    \ 'goimports': '-local ' .
      \ trim(system('{cd '. shellescape(expand('%:h')) .' && go list -m;}')),
    \ }
<
                                                    *'g:go_fmt_fail_silently'*

Use this option to disable showing a location list when |'g:go_fmt_command'|
fails. By default the location list is shown. >

  let g:go_fmt_fail_silently = 0
<
                                                     *'g:go_fmt_experimental'*

Use this option to enable fmt's experimental mode. This experimental mode is
superior to the current mode as it fully saves the undo history, so undo/redo
doesn't break. However, it's slow (creates/deletes a file for every save) and
it's causing problems on some Vim versions. By default it's disabled. >

  let g:go_fmt_experimental = 0

<
                                                     *'g:go_mod_fmt_autosave'*

Use this option to auto |:GoModFmt| on save. By default it's enabled >

  let g:go_mod_fmt_autosave = 1
<

                                               *'g:go_doc_keywordprg_enabled'*

Use this option to run `godoc` on words under the cursor with |K|; this will
normally run the `man` program, but for Go using `godoc` is more idiomatic. It
will not override the 'keywordprg' setting, but will run |:GoDoc|. Default
is enabled. >

  let g:go_doc_keywordprg_enabled = 1
<
                                                           *'g:go_doc_height'*

Maximum height for the GoDoc window created with |:GoDoc|. Default is 20. >

  let g:go_doc_max_height = 20
<
                                                     *'g:go_doc_popup_window'*

Use this option to use the popup-window for |K| and |:GoDoc|, rather than the
|preview-window|. Default is disabled.
>
  let g:go_doc_popup_window = 0
<
                                                             *'g:go_bin_path'*

Use this option to change default path for vim-go tools when using
|:GoInstallBinaries| and |:GoUpdateBinaries|. If not set `$GOBIN` or
`$GOPATH/bin` is used. >

  let g:go_bin_path = ""
<
                                                *'g:go_search_bin_path_first'*

This option lets |'g:go_bin_path'| (or its default value) take precedence over
$PATH when invoking a tool command such as |:GoFmt| or |:GoImports|.

Enabling this option ensures that the binaries installed via
|:GoInstallBinaries| and |:GoUpdateBinaries| are the same ones that are
invoked via the tool commands.

By default it is enabled. >

  let g:go_search_bin_path_first = 1
<
                                                           *'g:go_build_tags'*

Space-separated list of build tags passed to the `-tags` flag of tools that
support it.
There is also the |:GoBuildTags| convenience command to change or remove build
tags.
>
  let g:go_build_tags = ''
<
                                                    *'g:go_autodetect_gopath'*

Automatically modify GOPATH for certain directory structures, such as for
the `godep` tool which stores dependencies in the `Godeps` folder. What this
means is that all tools are now working with the newly modified GOPATH. So
|:GoDef| for example jumps to the source inside the `Godeps` (vendored)
source. Currently `godep` and `gb` are supported. By default it's disabled.
>
  let g:go_autodetect_gopath = 0
<
                                                      *'g:go_textobj_enabled'*

Adds custom text objects. By default it's enabled. >

  let g:go_textobj_enabled = 1
<
                                         *'g:go_textobj_include_function_doc'*

Consider the comment above a function to be part of the function when using
the `af` text object and `[[` motion. By default it's enabled. >

  let g:go_textobj_include_function_doc = 1
<
                                             *'g:go_textobj_include_variable'*

Consider the variable of an function assignment to be part of the anonymous
function when using the `af` text object. By default it's enabled. >

  let g:go_textobj_include_variable = 1
<
                                                          *'g:go_list_height'*

Specifies the window height for the quickfix and location list windows. The
default value (empty) automatically sets the height to the number of items
(maximum up to 10 items to prevent large heights). Setting the value
explicitly overrides this behavior. For standard Vim behavior, set it to 10.
>
  let g:go_list_height = 0
<
                                                            *'g:go_list_type'*

Specifies the type of list to use for command outputs (such as errors from
builds, results from static analysis commands, etc...). The list type for
specific commands can be overridden with |'g:go_list_type_commands'|. The
default value (empty) will use the appropriate kind of list for the command
that was called. Supported values are "", "quickfix", and "locationlist".
>
  let g:go_list_type = ""
<

                                                   *'g:go_list_type_commands'*

Specifies the type of list to use for command outputs (such as errors from
builds, results from static analysis commands, etc...). When an expected key
is not present in the dictionary, |'g:go_list_type'| will be used instead.
Supported keys are "GoBuild", "GoErrCheck", "GoFmt", "GoModFmt", "GoInstall",
"GoLint", "GoMetaLinter", "GoMetaLinterAutoSave", "GoModifyTags" (used for
both :GoAddTags and :GoRemoveTags), "GoRename", "GoRun", and "GoTest".
Supported values for each command are "quickfix" and "locationlist".
>
  let g:go_list_type_commands = {}
<
As an example, the following settings will change all list types to
`locationlist` except for `:GoBuild` where `quickfix` is used:
>
  let g:go_list_type = "locationlist"
  let g:go_list_type_commands = {"GoBuild": "quickfix"}
<

                                                       *'g:go_list_autoclose'*

Specifies whether the quickfix/location list should be closed automatically
in the absence of errors.  The default value is 1.
If you prefer to keep a long running error window open, you can disable
this by setting the value to 0.
>
  let g:go_list_autoclose = 1
<
                                                            *'g:go_term_mode'*

This option is Neovim only. Use it to change the default command used to
open a new terminal for go commands such as |:GoRun|.
The default is vsplit.
>
  let g:go_term_mode = "vsplit"
<
                                                          *'g:go_term_height'*
                                                           *'g:go_term_width'*

These options are Neovim only. Use them to control the height and width of
a terminal split. By default these are not set, meaning that the height and
width are set automatically by Neovim. The height only applies to a
horizontal split and width only applies to a vertical split.

For example here is how to set each to 30.
>
  let g:go_term_height = 30
  let g:go_term_width = 30
<
                                                         *'g:go_term_enabled'*

This option is Neovim only. Use it to change the behavior of the test
commands. If set to 1 it opens the test commands inside a new terminal
according to |'g:go_term_mode'|, otherwise it will run them in the background
just like `:GoBuild`. By default it is disabled.
>
  let g:go_term_enabled = 0
<
                                                   *'g:go_term_close_on_exit'*

This option is Neovim only. If set to 1 it closes the terminal after the
command run in it exits when the command fails. By default it is enabled.
>
  let g:go_term_close_on_exit = 1
<
                                                    *'g:go_echo_command_info'*

Echoes information about various Go commands, such as `:GoBuild`, `:GoTest`,
`:GoCoverage`, etc... Useful to disable if you use the statusline integration,
i.e: |go#statusline#Show()|. By default it's enabled
>
      let g:go_echo_command_info = 1
<
                                                       *'g:go_echo_go_info'*

Use this option to show the identifier information when code completion is
done. By default it's enabled. >

      let g:go_echo_go_info = 1
<
Please note that 'noshowmode' must be set for this feature to work correctly.

                                                  *'g:go_statusline_duration'*

Specifies the duration of statusline information being showed per package. By
default it's 60 seconds. Must be in milliseconds.
>
      let g:go_statusline_duration = 60000
<
                                                                *'g:go_debug'*

A list of options to debug; useful for development and/or reporting bugs.

Currently accepted values:

  shell-commands     Echo all shell commands that vim-go runs.
>
      let g:go_debug = []
<

==============================================================================
SYNTAX HIGHLIGHTING                                 *ft-go-syntax* *go-syntax*

vim-go comes with an enhanced version of Vim's Go syntax highlighting. It
comes with a number of features, most of which are disabled by default.

The recommended settings are the default values. If you're experiencing
slowdowns in Go files and you enabled some of these options then try disabling
them; some can be resource intensive.

                                                          *'g:go_fold_enable'*

Control syntax-based folding which takes effect when 'foldmethod' is set to
`syntax`.
You can enable specific fold regions by setting an array. Possible values are:

 block                `{` .. `}` blocks.
 import               `import` block.
 varconst             `var` and `const` blocks.
 package_comment      The package comment.
 comment              Any comment that is not the package comment.

By default all except "comment" are enabled:
>
  let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']
<
Enable folding of only imports:
>
  let g:go_fold_enable = ['import']
<
Disable everything (same as not setting 'foldmethod' to `syntax`):
>
  let g:go_fold_enable = []
<
                                     *'g:go_highlight_array_whitespace_error'*

Highlight white space after `[]`. >

  let g:go_highlight_array_whitespace_error = 0
<
                                      *'g:go_highlight_chan_whitespace_error'*

Highlight white space around the receive operator (`<-`) that doesn't follow
the standard style. >

  let g:go_highlight_chan_whitespace_error = 0
<
                                                *'g:go_highlight_extra_types'*

Highlight commonly used library types (`io.Reader`, etc.). >

  let g:go_highlight_extra_types = 0
<
                                            *'g:go_highlight_space_tab_error'*

Highlight instances of tabs following spaces. >

  let g:go_highlight_space_tab_error = 0
<
                                  *'g:go_highlight_trailing_whitespace_error'*

Highlight trailing white space. >

  let g:go_highlight_trailing_whitespace_error = 0
<
                                                  *'g:go_highlight_operators'*

Highlight operators such as `:=` , `==`, `-=`, etc.
>
  let g:go_highlight_operators = 0
<
                                                  *'g:go_highlight_functions'*

Highlight function and method declarations.
>
  let g:go_highlight_functions = 0
<
                                       *'g:go_highlight_function_parameters'*

Highlight the variable names in parameters (including named return parameters)
in function declarations. Setting this implies the functionality from
|'g:go_highlight_functions'|.
>
  let g:go_highlight_function_parameters = 0
<
                                             *'g:go_highlight_function_calls'*

Highlight function and method calls.
>
  let g:go_highlight_function_calls = 0
<
                                                      *'g:go_highlight_types'*

Highlight struct and interface names.
>
  let g:go_highlight_types = 0
<
                                                     *'g:go_highlight_fields'*

Highlight struct field names.
>
  let g:go_highlight_fields = 0
<
                                          *'g:go_highlight_build_constraints'*

Highlights build constraints.
>
  let g:go_highlight_build_constraints = 0
<
                                              *'g:go_highlight_generate_tags'*

Highlight go:generate directives.
>
  let g:go_highlight_generate_tags = 0
<
                                          *'g:go_highlight_string_spellcheck'*

Highlight spelling errors in strings when |spell| is enabled.
>
  let g:go_highlight_string_spellcheck = 1
<
                                             *'g:go_highlight_format_strings'*

Highlight printf-style formatting verbs inside string literals.
>
  let g:go_highlight_format_strings = 1
<
                                      *'g:go_highlight_variable_declarations'*

Highlight variable names in variable declarations (`x` in ` x :=`).
>
  let g:go_highlight_variable_declarations = 0
<
                                       *'g:go_highlight_variable_assignments'*

Highlight variable names in variable assignments (`x` in `x =`).
>
  let g:go_highlight_variable_assignments = 0
<
                                          *'g:go_highlight_diagnostic_errors'*

Highlight diagnostic errors.
>
  let g:go_highlight_diagnostic_errors = 1
<
                                        *'g:go_highlight_diagnostic_warnings'*

Highlight diagnostic warnings.
>
  let g:go_highlight_diagnostic_warnings = 1
<

==============================================================================
                                           *gohtmltmpl* *ft-gohtmltmpl-syntax*
                                           *gotexttmpl* *ft-gotexttmpl-syntax*
Go template syntax~

The `gotexttmpl` 'filetype' provides syntax highlighting and indentation for
Go's `text/template` package.

The `gohtmltmpl` filetype is for use with the `html/template` package and is
identical to `gotexttmpl` except that it will also load the standard `html`
filetype.

The `gohtmltmpl` filetype is automatically set for `*.tmpl` files; the
`gotexttmpl` is never automatically set and needs to be set manually.

==============================================================================
                                                    *gomod* *ft-gomod-syntax*
go.mod file syntax~

The `gomod` 'filetype' provides syntax highlighting for Go's module file
`go.mod`


==============================================================================
FAQ TROUBLESHOOTING                                     *go-troubleshooting*

How do I troubleshoot problems?~

One of the best ways to understand what vim-go is doing and the output from
the tools to which it delegates is to use leverage the features described in
|'g:go_debug'|.

I get a "Unknown function: go#config#..." error~

This often happens to vim-polyglot users when new config options are added to
vim-go. Run vim-polyglot's `build` script or make sure that vim-go is loaded
before vim-polyglot.

It can also happen when multiple versions of vim-go are installed and the
version loaded by Vim doesn't have a function introduced by a later version.
To see where vim-go is being loaded from run
>
    :verbose function go#config#FmtAutosave
<

The output will show the path to the `autoload/go/config.vim` that was loaded
by Vim. Make sure the root of the path to output by the command is the path
from which vim-go is expected to sourced. If it is not rooted as expected,
then there are multiple copies of vim-go installed; remove the unexpected
copies.

I get "not an editor command" error when I invoke :GoXXX~

This happens if vim-go is not installed properly. Be sure you have added this
line into your vimrc:
>
  filetype plugin indent on
<
Vim becomes slow while editing Go files~

To a lesser extent, this can be caused by `g:go_highlight_*` options. If Vim
is just slower than normal, but doesn't render unexpected characters in the
currrent window, then the problem is most likely the `g:go_highlight_*`
options. Try disabling them if you've enabled some of them.

I want to use a different binary name than "go", can I do this?~

There is no way to directly configure the binary name; but you can use a
wrapper script; for example if you would like to run `goapp` instead of `go`:

1. In `~/gobin/go` (remember to make it executable):
>
     #!/bin/sh
     # Remove gobin from PATH and run goapp.
     PATH=${PATH#$HOME/gobin} goapp "$@"
<
2. Start Vim with `~/gobin` as the first `PATH` entry so it will use the
   wrapper script:
>
     PATH="$HOME/gobin/:$PATH" vim
<
   Alternatively you you could set `$PATH` in your vimrc with an |:autocmd|.


How do I run focused ginkgo tests?~

You must set this environment variable in your `.vimrc`:
>
  let $GINKGO_EDITOR_INTEGRATION = "true"
<

Using with NeoVim~

Note: Neovim currently is not a first class citizen for vim-go. You are free
to open bug, however I'm not using Neovim so it's hard for me to test it.
vim-go might not work as well in Neovim as it does in Vim. I'm happy to accept
pull requests or very detailed bug reports. If you're interested to improve
the state of Neovim in vim-go you're always welcome!

Run `:GoRun` in a new tab, horizontal split or vertical split terminal
>
 au FileType go nmap <leader>rt <Plug>(go-run-tab)
 au FileType go nmap <leader>rs <Plug>(go-run-split)
 au FileType go nmap <leader>rv <Plug>(go-run-vertical)
<
By default new terminals are opened in a vertical split. To change it
>
 let g:go_term_mode = "split"
>

How can I customize the highlighting?~

All the highlight groups used by vim-go are prefixed with `go` (e.g.
`goType`) and are defined in the files in the `syntax` directory. To change
the highlighting for any group, add a `highlight` command for the group to
your vimrc.  To turn off the highlighting for any group, add `highlight link
group-name NONE` (where `group-name` is the name of the group whose highlight
you'd like to turn off) to your vimrc.

Some people may wish to highlight Go's builtins as keywords. To do so, one
should simply add `highlight link goBuiltins Keyword` to the `vimrc` file.

==============================================================================
DEVELOPMENT                                               *go-development*

vim-go supports test files written in VimScript; the way they're run is
roughly similar to Go tests:

- A `*.vim` file has a corresponding `*_test.vim`.
- All functions starting with `Test_` are run as test.
- A test is considered to be "failed" if |v:errors| has any entries. You can
  use one of the |test-functions| to set this, or append to it directly.

A simple example:
>
 function Test_run_fmt()
   call assert_equal(expected, actual)
   ...
 endfunction
<
To run tests vim-go comes with three small helper scripts:

  `scripts/install-vim`   Install a pristine Vim to `/tmp/vim-go-test/`.
  `scripts/run-vim`       Run a Vim version from `/tmp/vim-go-test/`.
  `scripts/test`          Run all tests with a Vim from `/tmp/vim-go-test/`.

All scripts accept a Vim version as the first argument, which can be
`vim-8.0` or `nvim`. You will need to install a Vim version with
`install-vim` before you can use `run-vim` or `test`.

You can install and test all Vim versions by running `make`.


==============================================================================
DONATION                                                         *go-donation*

People have asked for this for a long time, now you can be a fully supporter
by being a patreon at: https://www.patreon.com/bhcleek

By being a patron, you are enabling vim-go to grow and mature, helping me to
invest in bug fixes, new documentation, and improving both current and future
features. It's completely optional and is just a direct way to support
vim-go's ongoing development. Thanks!

Check it out: https://www.patreon.com/bhcleek


==============================================================================
CREDITS                                                         *go-credits*

* Go Authors for official Vim plugins.
* Gocode, Godef, Golint, Guru, Goimports, Errcheck projects and authors of
  those projects.
* Other vim-plugins, thanks for inspiration (vim-golang, go.vim, vim-gocode,
  vim-godef).
* vim-go contributors: https://github.com/fatih/vim-go/graphs/contributors.


 vim: ft=help tw=78 et ts=2 sw=2 sts=2 norl
